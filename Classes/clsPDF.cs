using System;
using System.Collections.Generic;
using System.Data;
using System.Web;
//using System.Web.UI;
//using System.Web.UI.WebControls;

using iTextSharp.text.pdf;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.factories;
using iTextSharp.text.pdf.draw;
using System.IO;

namespace MedHealthSolutions.Classes
{
    public class clsPDF
    {
        public static void exportHEDISSummary(string documentTitle, string documentDescription, int iHeight, int iWidth, DataSet ds, HttpResponse oResponse)
        {
            Document document = new Document(new iTextSharp.text.Rectangle(iWidth, iHeight), 25, 25, 65, 55);

            PdfWriter pdfDoc = PdfWriter.GetInstance(document, oResponse.OutputStream);

            //pdfDoc.PageEvent = new itextEvents(documentTitle, false, "Appointment");

            document.Open();
            /* Headers */
            document.AddTitle(documentTitle);
            document.AddCreator("Tectical Management Inc.");
            document.AddKeywords("Document generated by Tectical Management Inc. online portal.");
            document.AddHeader("Company Name", "Tectical Management Inc.");
            document.AddHeader("Creation Date", DateTime.Now.ToLongDateString());
            document.AddHeader("Creation Time", DateTime.Now.ToLongTimeString());

            /* Creating cover page */
            //create iTextSharp.text Image object using local image path

            iTextSharp.text.Image logo = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "\\imgs\\pdf\\tmi.png");
            logo.ScalePercent(60);
            PdfPTable pdfTabFooter = new PdfPTable(2);
            PdfPCell pdfCellRight = new PdfPCell(new Paragraph(documentTitle, new Font(Font.FontFamily.HELVETICA, 25, 1, new BaseColor(System.Drawing.Color.Black))));
            PdfPCell pdfCellLeft = new PdfPCell(logo);
            pdfCellRight.HorizontalAlignment = Element.ALIGN_BOTTOM;
            pdfCellLeft.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCellLeft.Border = 0;
            pdfCellRight.Border = 0;
            pdfTabFooter.AddCell(pdfCellLeft);
            pdfTabFooter.AddCell(pdfCellRight);
            pdfTabFooter.TotalWidth = document.PageSize.Width - 40;
            pdfTabFooter.WriteSelectedRows(0, -1, 10, document.PageSize.Height - 10, pdfDoc.DirectContent);

            PdfPTable pdfTabChart = new PdfPTable(new float[] { 65, 5, 30 });
            pdfTabChart.TotalWidth = 950;

            PdfPCell pdfCellTitle = new PdfPCell(new Paragraph("HEDIS Provider Summary", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkGreen))));
            PdfPCell pdfCellEmpty = new PdfPCell();
            PdfPCell pdfCellTitle2 = new PdfPCell();
            pdfCellTitle.Border = 0;
            pdfCellEmpty.Border = 0;
            pdfTabChart.AddCell(pdfCellTitle);
            pdfTabChart.AddCell(pdfCellEmpty);
            pdfTabChart.AddCell(pdfCellEmpty);

            DataTable dt = ds.Tables[0];
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //30 *100/200
                int iPercent = lib.cInt(Math.Ceiling(lib.cFloat(dt.Rows[i]["ConfirmedMeasures"]) * 100 / lib.cFloat(dt.Rows[i]["TotalQuestions"])));
                iTextSharp.text.Image imBar1 = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "\\imgs\\pdf\\bar1.png");
                imBar1.ScaleAbsoluteWidth(iPercent * 2);

                PdfPCell pdfCellText = new PdfPCell(new Paragraph(lib.cStr(dt.Rows[i]["Lastname"]) + " " + lib.cStr(dt.Rows[i]["Firstname"]) + "\n(" + lib.cStr(dt.Rows[i]["Vendor_ID"]) + ")", new Font(Font.FontFamily.HELVETICA, 12, 1, new BaseColor(System.Drawing.Color.Black))));
                PdfPCell pdfCellValue = new PdfPCell(new Paragraph(iPercent.ToString() + "%", new Font(Font.FontFamily.HELVETICA, 10, 1, new BaseColor(System.Drawing.Color.Black))));
                PdfPCell pdfCellImage = new PdfPCell(imBar1);
                pdfCellText.Border = 0;
                pdfCellValue.Border = 0;
                pdfCellImage.Border = 0;
                pdfTabChart.AddCell(pdfCellText);
                pdfTabChart.AddCell(pdfCellValue);
                pdfTabChart.AddCell(pdfCellImage);
            }
            document.Add(pdfTabChart);

            //Provider Measure Summary
            dt = ds.Tables[1];
            string vendor = "";
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (vendor != lib.cStr(dt.Rows[i]["vendor_pk"]))
                {
                    if (i != 0)
                    {
                        document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkBlue))));
                        document.Add(pdfTabChart);
                    }
                    pdfTabChart = new PdfPTable(new float[] { 80, 5, 15 });
                    pdfTabChart.TotalWidth = 950;
                    vendor = lib.cStr(dt.Rows[i]["vendor_pk"]);
                    pdfCellTitle = new PdfPCell(new Paragraph(lib.cStr(dt.Rows[i]["Lastname"]) + " " + lib.cStr(dt.Rows[i]["Firstname"]) + " (" + lib.cStr(dt.Rows[i]["Vendor_ID"]) + ")", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkBlue))));
                    pdfCellEmpty = new PdfPCell();
                    pdfCellTitle.Border = 0;
                    pdfCellEmpty.Border = 0;
                    pdfCellTitle.PaddingBottom = 5;
                    pdfTabChart.AddCell(pdfCellTitle);
                    pdfTabChart.AddCell(pdfCellEmpty);
                    pdfTabChart.AddCell(pdfCellEmpty);
                }


                int iPercent = lib.cInt(Math.Ceiling(lib.cFloat(dt.Rows[i]["ConfirmedMeasures"]) * 100 / lib.cFloat(dt.Rows[i]["TotalQuestions"])));
                iTextSharp.text.Image imBar1 = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "\\imgs\\pdf\\bar1.png");
                imBar1.ScaleAbsoluteWidth(iPercent);

                PdfPCell pdfCellText = new PdfPCell(new Paragraph(lib.cStr(dt.Rows[i]["measure_description"]), new Font(Font.FontFamily.HELVETICA, 11, 1, new BaseColor(System.Drawing.Color.Black))));
                PdfPCell pdfCellValue = new PdfPCell(new Paragraph(iPercent.ToString() + "%", new Font(Font.FontFamily.HELVETICA, 10, 1, new BaseColor(System.Drawing.Color.Black))));
                PdfPCell pdfCellImage = new PdfPCell(imBar1);
                pdfCellText.Border = 0;
                pdfCellValue.Border = 0;
                pdfCellImage.Border = 0;
                pdfCellImage.Padding = 2;
                pdfTabChart.AddCell(pdfCellText);
                pdfTabChart.AddCell(pdfCellValue);
                pdfTabChart.AddCell(pdfCellImage);
            }
            if (vendor != "")
            {
                document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkBlue))));
                document.Add(pdfTabChart);
            }

            //Provider/Member Measuer Summary
            dt = ds.Tables[2];
            string member = "";
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (member != lib.cStr(dt.Rows[i]["member_pk"]) + 'X' + lib.cStr(dt.Rows[i]["vendor_pk"]))
                {
                    if (i != 0)
                    {
                        document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkBlue))));
                        document.Add(pdfTabChart);
                    }
                    pdfTabChart = new PdfPTable(new float[] { 12, 84, 4 });
                    pdfTabChart.TotalWidth = 950;
                    member = lib.cStr(dt.Rows[i]["member_pk"]) + 'X' + lib.cStr(dt.Rows[i]["vendor_pk"]);

                    pdfCellTitle2 = new PdfPCell(new Paragraph("Provider: ", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.Black))));
                    pdfCellTitle = new PdfPCell(new Paragraph(lib.cStr(dt.Rows[i]["Lastname"]) + " " + lib.cStr(dt.Rows[i]["Firstname"]) + " (" + lib.cStr(dt.Rows[i]["Vendor_ID"]) + ")", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkBlue))));
                    pdfCellEmpty = new PdfPCell();
                    pdfCellTitle.Border = 0;
                    pdfCellEmpty.Border = 0;
                    pdfCellTitle2.Border = 0;
                    pdfCellTitle.PaddingBottom = 5;
                    pdfTabChart.AddCell(pdfCellTitle2);
                    pdfTabChart.AddCell(pdfCellTitle);
                    pdfTabChart.AddCell(pdfCellEmpty);

                    pdfCellTitle2 = new PdfPCell(new Paragraph("Member: ", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.Black))));
                    pdfCellTitle = new PdfPCell(new Paragraph(lib.cStr(dt.Rows[i]["MemberName"]) + " (" + lib.cStr(dt.Rows[i]["Member_ID"]) + ")", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkRed))));
                    pdfCellEmpty = new PdfPCell();
                    pdfCellTitle.Border = 0;
                    pdfCellEmpty.Border = 0;
                    pdfCellTitle2.Border = 0;
                    pdfCellTitle.PaddingBottom = 5;
                    pdfTabChart.AddCell(pdfCellTitle2);
                    pdfTabChart.AddCell(pdfCellTitle);
                    pdfTabChart.AddCell(pdfCellEmpty);
                }


                //int iPercent = lib.cInt(Math.Ceiling(lib.cFloat(dt.Rows[i]["ConfirmedMeasures"]) * 100 / lib.cFloat(dt.Rows[i]["TotalQuestions"])));


                PdfPCell pdfCellText = new PdfPCell(new Paragraph(lib.cStr(dt.Rows[i]["measure_description"]), new Font(Font.FontFamily.HELVETICA, 11, 1, new BaseColor(System.Drawing.Color.Black))));
                PdfPCell pdfCellValue;
                if (lib.cInt(dt.Rows[i]["ConfirmedMeasures"]) == 1)
                {
                    pdfCellValue = new PdfPCell(new Paragraph("YES", new Font(Font.FontFamily.HELVETICA, 10, 1, new BaseColor(System.Drawing.Color.Black))));
                }
                else
                {
                    pdfCellValue = new PdfPCell(new Paragraph("NO", new Font(Font.FontFamily.HELVETICA, 10, 1, new BaseColor(System.Drawing.Color.White))));
                    pdfCellValue.BackgroundColor = new BaseColor(System.Drawing.Color.DarkRed);
                }
                pdfCellEmpty = new PdfPCell();
                pdfCellEmpty.Border = 0;
                pdfCellText.Border = 0;
                pdfCellValue.Border = 5;
                pdfCellValue.BorderColor = new BaseColor(System.Drawing.Color.White);
                pdfTabChart.AddCell(pdfCellEmpty);
                pdfTabChart.AddCell(pdfCellText);
                pdfTabChart.AddCell(pdfCellValue);
            }
            if (vendor != "")
            {
                document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 15, 1, new BaseColor(System.Drawing.Color.DarkBlue))));
                document.Add(pdfTabChart);
            }

            document.Close();
            oResponse.ContentType = "application/pdf";
            oResponse.AddHeader("content-disposition", "attachment;filename=" + documentTitle.Replace(" ", "_").Replace(",", "") + ".pdf");
            oResponse.End();
        }

        public static void exportDashboard(string project, string user, string channel, string title, HttpResponse oResponse)
        {
            Document document = new Document(new iTextSharp.text.Rectangle(1618, 1250), 80, 80, 20, 25);

            PdfWriter pdfDoc = PdfWriter.GetInstance(document, oResponse.OutputStream);

            document.Open();
            /* Headers */
            document.AddTitle(title);
            document.AddCreator("MedHealth Solutions.");
            document.AddKeywords("Document generated by MedHealth Solutions. online portal.");
            document.AddHeader("Company Name", "MedHealth Solutions.");
            document.AddHeader("Creation Date", DateTime.Now.ToLongDateString());
            document.AddHeader("Creation Time", DateTime.Now.ToLongTimeString());


            //create iTextSharp.text Image object using local image path
            iTextSharp.text.Image logo = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "\\imgs\\pdf\\logo.png");

            ////pdfDoc.Add(logo);
            //document.Add(logo);
            ////////////////////////////////////////////////////////////////////////////
            // Page 2
            ////////////////////////////////////////////////////////////////////////////

            PdfPTable pdfTabHeader = new PdfPTable(2);
            PdfPCell pdfCellRight = new PdfPCell(new Paragraph("\n" + title, new Font(Font.FontFamily.HELVETICA, 40, 0)));
            PdfPCell pdfCellLeft = new PdfPCell(logo);
            pdfCellRight.HorizontalAlignment = Element.ALIGN_RIGHT;
            pdfCellLeft.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCellRight.Border = 0;
            pdfCellLeft.Border = 0;
            pdfTabHeader.AddCell(pdfCellLeft);
            pdfTabHeader.AddCell(pdfCellRight);
            pdfTabHeader.TotalWidth = document.PageSize.Width - 60;
            pdfTabHeader.WriteSelectedRows(0, -1, 30, document.PageSize.Height - 20, pdfDoc.DirectContent);

            PdfContentByte cb = pdfDoc.DirectContent;
            cb.MoveTo(1, pdfDoc.PageSize.Height - 115);
            cb.LineTo(pdfDoc.PageSize.Width, pdfDoc.PageSize.Height - 115);
            cb.Stroke();

            cb.MoveTo(1, 50);
            cb.LineTo(pdfDoc.PageSize.Width, 50);
            cb.Stroke();

            PdfPTable pdfTabFooter = new PdfPTable(2);
            PdfPCell pdfCellRightF = new PdfPCell(new Paragraph("Printed on " + DateTime.Now.ToString("MM-dd-yyyy HH:mm"), new Font(Font.FontFamily.HELVETICA, 14, 0)));
            PdfPCell pdfCellLeftF = new PdfPCell(new Paragraph("©" + DateTime.Now.ToString("yyyy") + " MedHealth", new Font(Font.FontFamily.HELVETICA, 14, 0)));
            pdfCellRightF.HorizontalAlignment = Element.ALIGN_RIGHT;
            pdfCellLeftF.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCellRightF.Border = 0;
            pdfCellLeftF.Border = 0;
            pdfTabFooter.AddCell(pdfCellLeftF);
            pdfTabFooter.AddCell(pdfCellRightF);
            pdfTabFooter.TotalWidth = document.PageSize.Width - 60;
            pdfTabFooter.WriteSelectedRows(0, -1, 25, 48, pdfDoc.DirectContent);

            document.Add(new Paragraph("\n\n\n", new Font(Font.FontFamily.HELVETICA, 25, 0)));
            if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath,"charts\\RAP_" + project + "_" + user + "_" + channel + ".png")))
            {
                document.Add(new Paragraph("Retrospective Progress", new Font(Font.FontFamily.HELVETICA, 25, 0)));
                iTextSharp.text.Image imRAP = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RAP_" + project + "_" + user + "_" + channel + ".png"));
                document.Add(imRAP);
            }

            if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RSBD_" + project + "_" + user + "_" + channel + ".png")))
            {
                document.Add(new Paragraph("Burn Down of Retrospective Pursuit", new Font(Font.FontFamily.HELVETICA, 25, 0)));
                iTextSharp.text.Image imRSBD = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RSBD_" + project + "_" + user + "_" + channel + ".png"));
                document.Add(imRSBD);
            }

            if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\OSCS_" + project + "_" + user + "_" + channel + ".png")))
            {
                document.Add(new Paragraph("Office Schedule and Contact Status", new Font(Font.FontFamily.HELVETICA, 25, 0)));
                document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 10, 0)));
                PdfPTable pdfOSCS = new PdfPTable(3);
                iTextSharp.text.Image imOSCS1 = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\OSCS_" + project + "_" + user + "_" + channel + ".png"));
                PdfPCell pdfOSCS1 = new PdfPCell(imOSCS1);
                pdfOSCS1.Border = 0;
                pdfOSCS.AddCell(pdfOSCS1);

                if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath, "charts\\OSCSD1_" + project + "_" + user + "_" + channel + ".png")))
                {
                    iTextSharp.text.Image imOSCS2 = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath, "charts\\OSCSD1_" + project + "_" + user + "_" + channel + ".png"));
                    PdfPCell pdfOSCS2 = new PdfPCell(imOSCS2);
                    pdfOSCS2.Border = 0;
                    pdfOSCS.AddCell(pdfOSCS2);
                }
                else {
                    PdfPCell pdfOSCS2 = new PdfPCell(new Paragraph(" "));
                    pdfOSCS2.Border = 0;
                    pdfOSCS.AddCell(pdfOSCS2);
                }


                if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\OSCSD2_" + project + "_" + user + "_" + channel + ".png")))
                {
                    iTextSharp.text.Image imOSCS3 = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\OSCSD2_" + project + "_" + user + "_" + channel + ".png"));
                    PdfPCell pdfOSCS3 = new PdfPCell(imOSCS3);
                    pdfOSCS3.Border = 0;
                    pdfOSCS.AddCell(pdfOSCS3);
                }
                else
                {
                    PdfPCell pdfOSCS3 = new PdfPCell(new Paragraph(" "));
                    pdfOSCS3.Border = 0;
                    pdfOSCS.AddCell(pdfOSCS3);
                }

                document.Add(pdfOSCS);
            }

            ////////////////////////////////////////////////////////////////////////////
            // Page 2
            ////////////////////////////////////////////////////////////////////////////
            document.NewPage();
            pdfTabHeader.WriteSelectedRows(0, -1, 30, document.PageSize.Height - 20, pdfDoc.DirectContent);

            cb.MoveTo(1, pdfDoc.PageSize.Height - 115);
            cb.LineTo(pdfDoc.PageSize.Width, pdfDoc.PageSize.Height - 115);
            cb.Stroke();

            cb.MoveTo(1, 50);
            cb.LineTo(pdfDoc.PageSize.Width, 50);
            cb.Stroke();

            pdfTabFooter.WriteSelectedRows(0, -1, 25, 48, pdfDoc.DirectContent);

            document.Add(new Paragraph("\n\n\n", new Font(Font.FontFamily.HELVETICA, 25, 0)));

            if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\QA_" + project + "_" + user + "_" + channel + ".png")))
            {
                document.Add(new Paragraph("Coding Quality Assurance (QA)", new Font(Font.FontFamily.HELVETICA, 25, 0)));
                document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 10, 0)));
                PdfPTable pdfQA = new PdfPTable(2);
                iTextSharp.text.Image imQA1 = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\QA_" + project + "_" + user + "_" + channel + ".png"));
                PdfPCell pdfQA1 = new PdfPCell(imQA1);
                pdfQA1.Border = 0;
                pdfQA.AddCell(pdfQA1);

                if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\QAD_" + project + "_" + user + "_" + channel + ".png")))
                {
                    iTextSharp.text.Image imQA2 = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\QAD_" + project + "_" + user + "_" + channel + ".png"));
                    PdfPCell pdfQA2 = new PdfPCell(imQA2);
                    pdfQA2.Border = 0;
                    pdfQA.AddCell(pdfQA2);
                }

                document.Add(pdfQA);
            }

            if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RSVS_" + project + "_" + user + "_" + channel + ".png")))
            {
                document.Add(new Paragraph("Validation Status", new Font(Font.FontFamily.HELVETICA, 25, 0)));
                document.Add(new Paragraph(" ", new Font(Font.FontFamily.HELVETICA, 10, 0)));
                PdfPTable pdfRSVS = new PdfPTable(2);

                iTextSharp.text.Image imRSVS1 = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RSVS_" + project + "_" + user + "_" + channel + ".png"));
                PdfPCell pdfRSVS1 = new PdfPCell(imRSVS1);
                pdfRSVS1.Border = 0;
                pdfRSVS.AddCell(pdfRSVS1);

                //if (File.Exists(HttpRuntime.AppDomainAppPath + "charts\\RSVD_" + project + "_" + user + "_" + channel + ".png"))
                //{
                //    iTextSharp.text.Image imRSVS2 = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "charts\\RSVD_" + project + "_" + user + "_" + channel + ".png");
                //    PdfPCell pdfRSVS2 = new PdfPCell(imRSVS2);
                //    pdfRSVS2.Border = 0;
                //    pdfRSVS.AddCell(pdfRSVS2);
                //}
                PdfPCell pdfRSVS2 = new PdfPCell();
                for (int im = 0; im < 7; im++) {
                    if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RSVD_"+ im +"_" + project + "_" + user + "_" + channel + ".png")))
                    {
                        iTextSharp.text.Image imRSVS2 = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "charts\\RSVD_" + im + "_" + project + "_" + user + "_" + channel + ".png");
                        pdfRSVS2.AddElement(imRSVS2);
                    }
                }
                pdfRSVS2.Border = 0;
                pdfRSVS.AddCell(pdfRSVS2);

                document.Add(pdfRSVS);
            }

            if (File.Exists(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RS15H_" + project + "_" + user + "_" + channel + ".png")))
            {
                document.Add(new Paragraph("Top 15 Validated HCC", new Font(Font.FontFamily.HELVETICA, 25, 0)));
                iTextSharp.text.Image imRS15H = iTextSharp.text.Image.GetInstance(Path.Combine(HttpRuntime.AppDomainAppPath , "charts\\RS15H_" + project + "_" + user + "_" + channel + ".png"));
                document.Add(imRS15H);
            }

            /* Closing and downloading the document*/
            document.Close();
            oResponse.ContentType = "application/pdf";
            oResponse.AddHeader("content-disposition", "attachment;filename=" + title.Replace(" ", "_").Replace(",", "") + ".pdf");
            oResponse.End();
        }

        //"© " + DateTime.Now.Year.ToString() + " AllyAlign Health"
        public static void prepareHeaderFooter(Document document, PdfWriter writer, PdfContentByte cb,BaseFont helv, PdfTemplate total, float firstPageHeight, string docTitle,string copyright) {
            string page_num = "Page " + document.PageNumber.ToString();

            //We are going to add two strings in header. Create separate Phrase object with font setting and string to be included
            Phrase pTitle = new Phrase(docTitle, FontFactory.GetFont("verdana", 20));
            Phrase pCopyright = new Phrase(copyright, FontFactory.GetFont("verdana", 12));
            Phrase pPageNum = new Phrase(page_num, FontFactory.GetFont("verdana", 12));
            Phrase pPrintTime = new Phrase("Printed on " + DateTime.Now.ToString("hh:mm tt dddd, MMM dd, yyyy"), FontFactory.GetFont("verdana", 12));

            //Create PdfTable object
            PdfPTable pdfTabHeader = new PdfPTable(1);
            PdfPCell pdfCell1Title = new PdfPCell(pTitle);
            pdfCell1Title.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1Title.Border = 0;
            pdfTabHeader.TotalWidth = document.PageSize.Width - 40;
            pdfTabHeader.AddCell(pdfCell1Title);

            PdfPTable pdfTabFooter;
            if (firstPageHeight == document.PageSize.Height)
                pdfTabFooter = new PdfPTable(3);
            else
                pdfTabFooter = new PdfPTable(1);

            PdfPCell pdfCellCopyright = new PdfPCell(pCopyright);
            PdfPCell pdfPrintTime = new PdfPCell(pPrintTime);
            PdfPCell pdfCellpPageNum = new PdfPCell(pPageNum);
            pdfCellCopyright.HorizontalAlignment = Element.ALIGN_RIGHT;
            pdfPrintTime.HorizontalAlignment = Element.ALIGN_CENTER;
            pdfCellpPageNum.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCellCopyright.Border = 0;
            pdfPrintTime.Border = 0;
            pdfCellpPageNum.Border = 0;
            //add all three cells into PdfTable
            pdfTabFooter.AddCell(pdfCellpPageNum);

            if (firstPageHeight == document.PageSize.Height)
            {
                pdfTabFooter.AddCell(pdfPrintTime);
                pdfTabFooter.AddCell(pdfCellCopyright);
            }
            pdfTabFooter.TotalWidth = document.PageSize.Width - 40;
            //call WriteSelectedRows of PdfTable. This writes rows from PdfWriter in PdfTable
            //first param is start row. -1 indicates there is no end row and all the rows to be included to write
            //Third and fourth param is x and y position to start writing
            if (firstPageHeight == document.PageSize.Height)
                pdfTabHeader.WriteSelectedRows(0, -1, 20, document.PageSize.Height - 15, writer.DirectContent);

            pdfTabFooter.WriteSelectedRows(0, -1, 20, 30, writer.DirectContent);
            //set pdfContent value
            PdfContentByte pdfContent;
            pdfContent = writer.DirectContent;
            //Move the pointer and draw line to separate header section from rest of page
            //Header Line
            if (firstPageHeight == document.PageSize.Height)
            {
                pdfContent.MoveTo(0, document.PageSize.Height - 50);
                pdfContent.LineTo(document.PageSize.Width - 0, document.PageSize.Height - 50);
            }

            //Footer Line
            pdfContent.MoveTo(0, 30);
            pdfContent.LineTo(document.PageSize.Width - 0, 30);

            pdfContent.Stroke();

            //**** Page Numbering            
            cb.SaveState();
            string text = "Page " + writer.PageNumber + " of ";
            float textBase = document.Bottom - 20;
            float textSize = 12; //helv.GetWidthPoint(text, 12);
            cb.BeginText();
            cb.SetFontAndSize(helv, 12);

            float adjust = helv.GetWidthPoint("0", 12);
            cb.SetTextMatrix(document.Left - textSize - adjust + 20, textBase);
            cb.ShowText("");
            cb.EndText();
            cb.AddTemplate(total, adjust, textBase);
            cb.RestoreState();
        }
        public static void prepareChaseListTable4PDF(DataTable[] dt, int is_one_page_per_patient, Document document, HttpResponse oResponse, string file_name, string documentTitle, PdfWriter oPdfWriter, int include_BAA)
        {
            iTextSharp.text.Image checkbox = iTextSharp.text.Image.GetInstance(HttpRuntime.AppDomainAppPath + "\\imgs\\checkbox.png");
            /* Tables */
            for (int iTab = 0; iTab < dt.Length; iTab++)
            {
                if (is_one_page_per_patient == 0)
                {
                    //With Effective Date
                    //iTextSharp.text.pdf.PdfPTable tbl = new iTextSharp.text.pdf.PdfPTable(new float[] {5,5,13,13,40,12,12});
                    //Without effective date
                    iTextSharp.text.pdf.PdfPTable tbl;
                    if (dt[iTab].Columns.Count == 5)
                        tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 16, 16, 46, 17 });
                    else if (dt[iTab].Columns.Count == 6)
                        tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 13, 13, 30, 12, 27 });
                    else if (dt[iTab].Columns.Count == 7)
                        tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 13, 13, 30, 12, 15, 12 });
                    else if (dt[iTab].Columns.Count == 8)
                        tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 15, 15, 24, 11, 10, 10, 10 });
                    else if (dt[iTab].Columns.Count == 9)
                        tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 14, 14, 16, 11, 10, 10, 10, 10 });
                    else
                        tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 10, 10, 14, 11, 10, 10, 10, 10, 10 });

                    tbl.WidthPercentage = 100;
                    tbl.HeaderRows = 1;

                    if (dt[iTab].TableName != "")
                    {
                        string[] arHeaders = dt[iTab].TableName.Split('~');
                        for (int iHeader = 0; iHeader < arHeaders.Length; iHeader++)
                        {
                            if (iHeader > 0)
                            {
                                PdfPCell objCellTitle;
                                if (iHeader == 1)
                                {
                                    objCellTitle = new PdfPCell(new Phrase(2, arHeaders[iHeader], new Font(Font.FontFamily.HELVETICA, 14, 1)));
                                    objCellTitle.PaddingTop = 10;
                                }
                                else
                                {
                                    objCellTitle = new PdfPCell(new Phrase(2, arHeaders[iHeader], new Font(Font.FontFamily.HELVETICA, 13, 0)));
                                    objCellTitle.PaddingTop = 4;
                                }
                                objCellTitle.Colspan = dt[iTab].Columns.Count;
                                objCellTitle.PaddingBottom = 5;
                                objCellTitle.BorderWidth = 0;
                                tbl.AddCell(objCellTitle);

                                tbl.HeaderRows++;
                            }
                        }
                    }

                    for (int iCol = 0; iCol < dt[iTab].Columns.Count; iCol++)
                    {
                        PdfPCell objCell = new PdfPCell(new Phrase(2, dt[iTab].Columns[iCol].ColumnName, new Font(Font.FontFamily.HELVETICA, 14, 1)));
                        objCell.Padding = 4;
                        tbl.AddCell(objCell);
                    }
                    for (int iRow = 0; iRow < dt[iTab].Rows.Count; iRow++)
                    {
                        for (int iCol = 0; iCol < dt[iTab].Columns.Count; iCol++)
                        {
                            if (iCol == 0)
                            {
                                PdfPCell objCell = new PdfPCell(checkbox);
                                objCell.Padding = 2;
                                tbl.AddCell(objCell);
                            }
                            else
                            {
                                PdfPCell objCell = new PdfPCell(new Phrase(2, lib.cStr(dt[iTab].Rows[iRow][iCol]), new Font(Font.FontFamily.HELVETICA, 13)));
                                objCell.Padding = 3;
                                tbl.AddCell(objCell);
                            }
                        }
                    }
                    document.Add(tbl);
                    if (is_one_page_per_patient == 1)
                        document.NewPage();
                }
                else
                {
                    //**************************************************
                    //  One Page Per Patient
                    //**************************************************
                    for (int iRow = 0; iRow < dt[iTab].Rows.Count; iRow++)
                    {
                        iTextSharp.text.pdf.PdfPTable tbl;
                        if (dt[iTab].Columns.Count == 5)
                            tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 16, 16, 46, 17 });
                        else if (dt[iTab].Columns.Count == 6)
                            tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 13, 13, 30, 12, 27 });
                        else if (dt[iTab].Columns.Count == 7)
                            tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 13, 13, 30, 12, 15, 12 });
                        else if (dt[iTab].Columns.Count == 8)
                            tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 15, 15, 24, 11, 10, 10, 10 });
                        else if (dt[iTab].Columns.Count == 9)
                            tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 14, 14, 16, 11, 10, 10, 10, 10 });
                        else
                            tbl = new iTextSharp.text.pdf.PdfPTable(new float[] { 5, 10, 10, 14, 11, 10, 10, 10, 10, 10 });
                        tbl.WidthPercentage = 100;
                        tbl.HeaderRows = 1;

                        if (dt[iTab].TableName != "")
                        {
                            string[] arHeaders = dt[iTab].TableName.Replace(" list", " member " + (iRow + 1)).Split('~');
                            for (int iHeader = 0; iHeader < arHeaders.Length; iHeader++)
                            {
                                if (iHeader > 0)
                                {
                                    PdfPCell objCellTitle;
                                    if (iHeader == 1)
                                    {
                                        objCellTitle = new PdfPCell(new Phrase(2, arHeaders[iHeader], new Font(Font.FontFamily.HELVETICA, 14, 1)));
                                        objCellTitle.PaddingTop = 10;
                                    }
                                    else
                                    {
                                        objCellTitle = new PdfPCell(new Phrase(2, arHeaders[iHeader], new Font(Font.FontFamily.HELVETICA, 13, 0)));
                                        objCellTitle.PaddingTop = 4;
                                    }
                                    objCellTitle.Colspan = dt[iTab].Columns.Count;
                                    objCellTitle.PaddingBottom = 5;
                                    objCellTitle.BorderWidth = 0;
                                    tbl.AddCell(objCellTitle);

                                    tbl.HeaderRows++;
                                }
                            }
                        }

                        for (int iCol = 0; iCol < dt[iTab].Columns.Count; iCol++)
                        {
                            PdfPCell objCell = new PdfPCell(new Phrase(2, dt[iTab].Columns[iCol].ColumnName, new Font(Font.FontFamily.HELVETICA, 14, 1)));

                            objCell.Padding = 4;
                            tbl.AddCell(objCell);
                        }

                        for (int iCol = 0; iCol < dt[iTab].Columns.Count; iCol++)
                        {
                            PdfPCell objCell = new PdfPCell(new Phrase(2, lib.cStr(dt[iTab].Rows[iRow][iCol]), new Font(Font.FontFamily.HELVETICA, 13)));
                            objCell.Padding = 3;
                            tbl.AddCell(objCell);
                        }
                        document.Add(tbl);
                        document.NewPage();
                    }
                }
            }

            //BAA Insert Starts//////////////////////////////////////////////////////
            if (include_BAA == 1)
            {
                string baa_filename = Path.Combine(HttpRuntime.AppDomainAppPath, "imgs\\pdf\\BAA.pdf");
                PdfReader reader = new PdfReader(baa_filename);
                PdfContentByte cb = oPdfWriter.DirectContent;
                for (int pageNumber = 1; pageNumber < reader.NumberOfPages + 1; pageNumber++)
                {
                    document.SetPageSize(reader.GetPageSizeWithRotation(1));
                    document.NewPage();
                    //Insert to Destination on the first page
                    if (pageNumber == 1)
                    {
                        Chunk fileRef = new Chunk(" ");
                        fileRef.SetLocalDestination(baa_filename);
                        document.Add(fileRef);
                    }

                    PdfImportedPage page = oPdfWriter.GetImportedPage(reader, pageNumber);
                    int rotation = reader.GetPageRotation(pageNumber);
                    if (rotation == 90 || rotation == 270)
                    {
                        cb.AddTemplate(page, 0, -1f, 1f, 0, 0, reader.GetPageSizeWithRotation(pageNumber).Height);
                    }
                    else
                    {
                        cb.AddTemplate(page, 1f, 0, 0, 1f, 0, 0);
                    }
                }
            }
      
            //BAA Insert Ends//////////////////////////////////////////////////////

            /* Closing and downloading the document*/
            document.Close();
            if (file_name == "")
            {
                document.Close();
                oResponse.ContentType = "application/pdf";
                oResponse.AddHeader("content-disposition", "attachment;filename=" + documentTitle.Replace(" ", "_").Replace(",", "") + ".pdf");
                oResponse.AddHeader("content-disposition", "attachment;filename=" + documentTitle.Replace(" ", "_").Replace(",", "") + ".pdf");
                oResponse.End();
            }
        }

        public static DataTable[] prepareChaseListData4PDF(string include_DOS, DataSet ds)
        {
            DataTable[] dt = new DataTable[ds.Tables[1].Rows.Count];
            DataTable dtAdditionalCols = ds.Tables[5];
            for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
            {
                dt[i] = new DataTable();
                dt[i].Columns.Add(" "); //For Checkbox
                dt[i].Columns.Add("Member ID");
                dt[i].Columns.Add("Chase ID");
                dt[i].Columns.Add("Member Name");
                dt[i].Columns.Add("DOB");
                //dt[i].Columns.Add("Effective Date");
                if (include_DOS == "1")
                {
                    dt[i].Columns.Add("DOSs");
                }

                for (int c = 0; c < dtAdditionalCols.Rows.Count; c++)
                {
                    dt[i].Columns.Add(dtAdditionalCols.Rows[c]["KeyValue"].ToString());
                }

                //if (include_BAA == "1")
                //{
                //    dt[i].Columns.Add("BAA");
                //}
                //for (int c = 0; c < dtAdditionalCols.Rows.Count; c++)
                //{
                //    dt[i].Columns.Add(dtAdditionalCols.Rows[c]["KeyValue"].ToString());
                //}


                dt[i].TableName = "1~Provider ID:  " + lib.cStr(ds.Tables[1].Rows[i]["Provider ID"]) + "\nProvider Name: " + lib.cStr(ds.Tables[1].Rows[i]["Provider"]) + "\n ";
                dt[i].TableName += "~Below, please find list of " + lib.cStr(ds.Tables[1].Rows[i]["Charts"]) + " members suspected for the provider:";

                DataRow[] dr = ds.Tables[2].Select("Provider_PK=" + lib.cStr(ds.Tables[1].Rows[i]["Provider_PK"]));
                int iChart = 0;
                foreach (DataRow d in dr)
                {
                    iChart++;
                    DataRow new_dr = dt[i].NewRow();
                    new_dr[0] = " ";

                    //DataRow new_baa = dt[i].NewRow();
                    //new_baa[0] = " ";

                    new_dr["Member ID"] = lib.cStr(d["Member ID"]);
                    new_dr["Chase ID"] = lib.cStr(d["Chase ID"]);
                    new_dr["Member Name"] = lib.cStr(d["Member Name"]);
                    new_dr["DOB"] = lib.cDate(d["DOB"]);
                    if (include_DOS == "1")
                        new_dr["DOSs"] = lib.cStr(d["DOSs"]);
                    for (int c = 0; c < dtAdditionalCols.Rows.Count; c++)
                    {
                        new_dr[dtAdditionalCols.Rows[c]["KeyValue"].ToString()] = lib.cStr(d[dtAdditionalCols.Rows[c]["KeyName"].ToString()]);
                    }
                    dt[i].Rows.Add(new_dr);

                    //if (include_BAA == "1")
                    //    new_baa["BAA"] = lib.cStr(d["BAA"]);
                    //for (int bb = 0; bb < dtAdditionalCols.Rows.Count; bb++)
                    //{
                    //    new_baa[dtAdditionalCols.Rows[bb]["KeyValue"].ToString()] = lib.cStr(d[dtAdditionalCols.Rows[bb]["KeyName"].ToString()]);
                    //}
                    //dt[i].Rows.Add(new_baa);

                }
            }
            return dt;
        }
    }
}